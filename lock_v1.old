package locky

type lockreq struct {
	ch   chan bool
	job  int // 0 lock , 1 unlock, 2 change
	path string
	p2   string
}

func sContains(a, b string) bool {
	if len(a) <= len(b) {
		return (a == b[:len(a)])
	}
	return (b == a[:len(b)])
}

func loop(ch chan lockreq) {
	queue := make([]lockreq, 0)
	live := make([]string, 0)

	release := func() {
		q2 := make([]lockreq, 0)
		for _, r := range queue {
			found := false
			for _, p := range live {
				if sContains(r.path, p) {
					found = true
					q2 = append(q2, r)
					break
				}
			}
			if !found {
				live = append(live, r.path)
				r.ch <- true
			}
		}
		queue = q2

	}

	for req := range ch {
		switch req.job {
		case 0: //Lock
			match := false
			for _, p := range live {
				if sContains(req.path, p) {
					match = true
					queue = append(queue, req)
					break
				}
			}
			if !match {
				live = append(live, req.path)
				req.ch <- true
			}

		case 1: // Unlock
			for i, p := range live {
				if p == req.path {
					last := len(live) - 1
					live[i] = live[last]
					live = live[:last]
					break
				}
			}
			req.ch <- true
			release()

		case 2: // Dig
			for i, p := range live {
				if p == req.path {
					live[i] = req.p2
					break
				}
			}
			req.ch <- true
			release()
		default:
			req.ch <- false
		}

	}
}

type Locker chan lockreq

func BeginLoop() Locker {
	ch := make(chan lockreq)
	go loop(ch)
	return ch

}

func (l Locker) LockPath(p string) {
	gchan := make(chan bool)
	l <- lockreq{gchan, 0, p, ""}
	_ = <-gchan
}

func (l Locker) UnlockPath(p string) {
	gchan := make(chan bool)
	l <- lockreq{gchan, 1, p, ""}
	_ = <-gchan
}

func (l Locker) DigPath(p, q string) {
	gchan := make(chan bool)
	l <- lockreq{gchan, 2, p, q}
}
